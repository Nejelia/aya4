///*Задание 1 Создайте класс MyMatrix, представляющий матрицу m на n.
//Создайте конструктор, принимающий число строк и столбцов, заполняющий матрицу случайными числами в диапазоне,
//который пользователь вводит при запуске программы.
//Определите операторы сложения, вычитания и умножения матриц, а также умножения и деления матрицы на число.
//Создайте пользовательский индексатор матрицы для доступа к элементам матрицы по номеру строки и столбца.*/

//using System;

//class MyMatrix
//{
//    private int[,] matrix; // Двумерный массив для хранения элементов матрицы
//    private int rows; // Количество строк матрицы
//    private int columns; // Количество столбцов матрицы

//    // Конструктор для создания матрицы заданного размера и заполнения случайными числами
//    public MyMatrix(int rows, int columns, int minValue, int maxValue)
//    {
//        this.rows = rows;
//        this.columns = columns;
//        matrix = new int[rows, columns];
//        Random random = new Random();

//        // Заполнение матрицы случайными числами в заданном диапазоне
//        for (int i = 0; i < rows; i++)
//        {
//            for (int j = 0; j < columns; j++)
//            {
//                matrix[i, j] = random.Next(minValue, maxValue);
//            }
//        }
//    }

//    // Пользовательский индексатор для доступа к элементам матрицы
//    public int this[int i, int j]
//    {
//        get { return matrix[i, j]; }
//        set { matrix[i, j] = value; }
//    }

//    // Оператор сложения матриц
//    public static MyMatrix operator +(MyMatrix a, MyMatrix b)
//    {
//        if (a.rows != b.rows || a.columns != b.columns)
//        {
//            throw new ArgumentException("Матрицы должны иметь одинаковые размеры для сложения");
//        }

//        MyMatrix result = new MyMatrix(a.rows, a.columns, 0, 0);

//        for (int i = 0; i < a.rows; i++)
//        {
//            for (int j = 0; j < a.columns; j++)
//            {
//                result[i, j] = a[i, j] + b[i, j];
//            }
//        }

//        return result;
//    }

//    // Оператор вычитания матриц
//    public static MyMatrix operator -(MyMatrix a, MyMatrix b)
//    {
//        if (a.rows != b.rows || a.columns != b.columns)
//        {
//            throw new ArgumentException("Матрицы должны иметь одинаковые размеры для вычитания");
//        }

//        MyMatrix result = new MyMatrix(a.rows, a.columns, 0, 0);

//        for (int i = 0; i < a.rows; i++)
//        {
//            for (int j = 0; j < a.columns; j++)
//            {
//                result[i, j] = a[i, j] - b[i, j];
//            }
//        }

//        return result;
//    }

//    // Оператор умножения матриц
//    public static MyMatrix operator *(MyMatrix a, MyMatrix b)
//    {
//        if (a.columns != b.rows)
//        {
//            throw new ArgumentException("Число столбцов первой матрицы должно быть равно числу строк второй матрицы для умножения");
//        }

//        MyMatrix result = new MyMatrix(a.rows, b.columns, 0, 0);

//        for (int i = 0; i < a.rows; i++)
//        {
//            for (int j = 0; j < b.columns; j++)
//            {
//                for (int k = 0; k < a.columns; k++)
//                {
//                    result[i, j] += a[i, k] * b[k, j];
//                }
//            }
//        }

//        return result;
//    }

//    // Оператор умножения матрицы на число
//    public static MyMatrix operator *(MyMatrix a, int scalar)
//    {
//        MyMatrix result = new MyMatrix(a.rows, a.columns, 0, 0);

//        for (int i = 0; i < a.rows; i++)
//        {
//            for (int j = 0; j < a.columns; j++)
//            {
//                result[i, j] = a[i, j] * scalar;
//            }
//        }

//        return result;
//    }

//    // Оператор деления матрицы на число
//    public static MyMatrix operator /(MyMatrix a, int divisor)
//    {
//        if (divisor == 0)
//        {
//            throw new ArgumentException("Деление на ноль недопустимо");
//        }

//        MyMatrix result = new MyMatrix(a.rows, a.columns, 0, 0);

//        for (int i = 0; i < a.rows; i++)
//        {
//            for (int j = 0; j < a.columns; j++)
//            {
//                result[i, j] = a[i, j] / divisor;
//            }
//        }

//        return result;
//    }

//    // Метод для вывода матрицы в консоль
//    public void PrintMatrix()
//    {
//        for (int i = 0; i < rows; i++)
//        {
//            for (int j = 0; j < columns; j++)
//            {
//                Console.Write(matrix[i, j] + " ");
//            }
//            Console.WriteLine();
//        }
//    }
//}

//class Program
//{
//    static void Main()
//    {
//        // Запрос у пользователя на ввод параметров матрицы
//        Console.Write("Введите количество строк матрицы: ");
//        int rows = int.Parse(Console.ReadLine());

//        Console.Write("Введите количество столбцов матрицы: ");
//        int columns = int.Parse(Console.ReadLine());

//        Console.Write("Введите минимальное значение для заполнения матрицы: ");
//        int minValue = int.Parse(Console.ReadLine());

//        Console.Write("Введите максимальное значение для заполнения матрицы: ");
//        int maxValue = int.Parse(Console.ReadLine());

//        // Создание матрицы с заданными параметрами
//        MyMatrix matrixA = new MyMatrix(rows, columns, minValue, maxValue);
//        MyMatrix matrixB = new MyMatrix(rows, columns, minValue, maxValue);

//        // Вывод исходных матриц
//        Console.WriteLine("Исходная матрица A:");
//        matrixA.PrintMatrix();

//        Console.WriteLine("\nИсходная матрица B:");
//        matrixB.PrintMatrix();

//        // Пример использования операторов
//        Console.WriteLine("\nРезультат сложения матриц:");
//        (matrixA + matrixB).PrintMatrix();

//        Console.WriteLine("\nРезультат вычитания матриц:");
//        (matrixA - matrixB).PrintMatrix();

//        Console.WriteLine("\nРезультат умножения матриц:");
//        (matrixA * matrixB).PrintMatrix();

//        Console.WriteLine("\nРезультат умножения матрицы A на число 2:");
//        (matrixA * 2).PrintMatrix();

//        Console.WriteLine("\nРезультат деления матрицы A на число 2:");
//        (matrixA / 2).PrintMatrix();
//    }
//}

///*Задание 2 Создайте класс Car с тремя авто-свойствами: Name, ProductionYear и MaxSpeed,
//соответствующими названию, году выпуска и максимальной скорости соответственно.
//Создайте класс CarComparer, наследуемый от IComparer<Car> и реализуйте метод Compare таким образом,
//чтобы можно было сортировать массив элементов Car по названию, году выпуска или максимальной скорости по выбору.
//Создайте массив элементов Car и продемонстрируйте сортировку различными способами.*/

//using System;
//using System.Collections.Generic;

//// Класс, представляющий автомобиль
//class Car
//{
//    public string Name { get; set; } // Название автомобиля
//    public int ProductionYear { get; set; } // Год выпуска
//    public int MaxSpeed { get; set; } // Максимальная скорость

//    // Конструктор для инициализации свойств автомобиля
//    public Car(string name, int productionYear, int maxSpeed)
//    {
//        Name = name;
//        ProductionYear = productionYear;
//        MaxSpeed = maxSpeed;
//    }

//    // Переопределение метода ToString для удобного вывода информации об автомобиле
//    public override string ToString()
//    {
//        return $"Автомобиль: {Name}, Год выпуска: {ProductionYear}, Максимальная скорость: {MaxSpeed} км/ч";
//    }
//}

//// Класс, реализующий интерфейс IComparer<Car> для сравнения автомобилей
//class CarComparer : IComparer<Car>
//{
//    private string sortBy; // Поле для хранения выбранного поля для сортировки

//    // Конструктор класса CarComparer, принимающий строку с именем поля для сортировки
//    public CarComparer(string sortBy)
//    {
//        this.sortBy = sortBy;
//    }

//    // Реализация метода Compare интерфейса IComparer<Car>
//    public int Compare(Car x, Car y)
//    {
//        switch (sortBy.ToLower())
//        {
//            case "name":
//                return x.Name.CompareTo(y.Name);
//            case "productionyear":
//                return x.ProductionYear.CompareTo(y.ProductionYear);
//            case "maxspeed":
//                return x.MaxSpeed.CompareTo(y.MaxSpeed);
//            default:
//                throw new ArgumentException("Некорректное поле для сортировки");
//        }
//    }
//}

//class Program
//{
//    static void Main()
//    {
//        Console.WriteLine("Демонстрация сортировки массива автомобилей:");

//        // Создание массива автомобилей
//        Car[] cars = new Car[]
//        {
//            new Car("Toyota", 2022, 180),
//            new Car("BMW", 2020, 220),
//            new Car("Audi", 2021, 200)
//        };

//        // Вывод исходного массива
//        Console.WriteLine("\nИсходный массив:");
//        PrintCars(cars);

//        // Сортировка по названию
//        Array.Sort(cars, new CarComparer("Name"));
//        Console.WriteLine("\nСортировка по названию:");
//        PrintCars(cars);

//        // Сортировка по году выпуска
//        Array.Sort(cars, new CarComparer("ProductionYear"));
//        Console.WriteLine("\nСортировка по году выпуска:");
//        PrintCars(cars);

//        // Сортировка по максимальной скорости
//        Array.Sort(cars, new CarComparer("MaxSpeed"));
//        Console.WriteLine("\nСортировка по максимальной скорости:");
//        PrintCars(cars);
//    }

//    // Метод для вывода массива автомобилей в консоль
//    static void PrintCars(Car[] cars)
//    {
//        foreach (var car in cars)
//        {
//            Console.WriteLine(car);
//        }
//    }
//}

/*Задание 3 Используйте класс Car из задания №2, на его основе создайте класс CarCatalor, содержащий массив элементов типа Car. 
Для класса CarCatalog реализуйте возможность итерации по элементам массива Car с помощью оператора foreach различными способами: 
Прямой проход с первого элемента до последнего.
Обратный проход от последнего к первому.
Проход по элементам массива с фильтром по году выпуска.
Проход по элементам массива с фильтром по максимальной скорости.

Примечание: для выполнения задания необходимо реализовать различные итераторы, используя конструкцию yield return.
Для п.3 и 4, итератор должен принимать год выпуска и скорость как параметр, чтобы возвращать только те элементы коллекции,
которые удовлетворяют условию.*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;

// Класс, представляющий автомобиль
class Car
{
    public string Name { get; set; } // Название автомобиля
    public int ProductionYear { get; set; } // Год выпуска
    public int MaxSpeed { get; set; } // Максимальная скорость

    // Конструктор для инициализации свойств автомобиля
    public Car(string name, int productionYear, int maxSpeed)
    {
        Name = name;
        ProductionYear = productionYear;
        MaxSpeed = maxSpeed;
    }

    // Переопределение метода ToString для удобного вывода информации об автомобиле
    public override string ToString()
    {
        return $"Автомобиль: {Name}, Год выпуска: {ProductionYear}, Максимальная скорость: {MaxSpeed} км/ч";
    }
}
// Класс, представляющий каталог автомобилей
class CarCatalog : IEnumerable<Car>
{
    private Car[] cars; // Массив автомобилей

    // Конструктор для создания каталога с заданным массивом автомобилей
    public CarCatalog(Car[] cars)
    {
        this.cars = cars;
    }

    // Реализация интерфейса IEnumerable<Car> для поддержки оператора foreach
    public IEnumerator<Car> GetEnumerator()
    {
        foreach (var car in cars)
        {
            yield return car;
        }
    }

     public IEnumerator<Car> GetReverseEnumerator()
        {
        for (int i = cars.Length - 1; i >= 0; i--)
        {
            yield return cars[i];
        }
        
  
        
        }

       
    

    // Реализация неявного интерфейса IEnumerable для поддержки оператора foreach
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    // Вспомогательный метод для фильтрации по году выпуска
    public IEnumerable<Car> FilterByYear(int year)
    {
        foreach (var car in cars)
        {
            if (car.ProductionYear == year)
            {
                yield return car;
            }
        }
    }

    // Вспомогательный метод для фильтрации по максимальной скорости
    public IEnumerable<Car> FilterByMaxSpeed(int maxSpeed)
    {
        foreach (var car in cars)
        {
            if (car.MaxSpeed >= maxSpeed)
            {
                yield return car;
            }
        }
    }
}

class Program
{
    static void Main()
    {
        Console.WriteLine("Итерация по элементам массива CarCatalog:");

        // Создание каталога автомобилей
        Car[] carsArray = new Car[]
        {
            new Car("Toyota", 2022, 180),
            new Car("BMW", 2020, 220),
            new Car("Audi", 2021, 200)
        };

        CarCatalog carCatalog = new CarCatalog(carsArray);
 
        // Итерация по элементам массива CarCatalog
        Console.WriteLine("\n1. Прямой проход с первого элемента до последнего:");
        foreach (var car in carCatalog)
        {
            Console.WriteLine(car);
        }

        Console.WriteLine("\n2. Обратный проход от последнего к первому:");
        foreach (var car in carCatalog.Reverse())
        {
            Console.WriteLine(car);
        }

        Console.WriteLine("\n3. Проход по элементам массива с фильтром по году выпуска (2020):");
        foreach (var car in carCatalog.FilterByYear(2020))
        {
            Console.WriteLine(car);
        }

        Console.WriteLine("\n4. Проход по элементам массива с фильтром по максимальной скорости (200 км/ч):");
        foreach (var car in carCatalog.FilterByMaxSpeed(200))
        {
            Console.WriteLine(car);
        }
    }
}
